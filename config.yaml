---

- logging:
    info: /store/rally-ci/rally-ci.info.log
    error: /store/rally-ci/rally-ci.error.log
    debug: /store/rally-ci/rally-ci.debug.log

- rally-ci:
    pub-dir: /store/rally-ci/logs

- ssh-key:
    name: default
    public: "/home/eye/.ssh/rally.pub"
    private: "/home/eye/.ssh/rally"

- service:
    name: openstack-gerrit
    module: rallyci.services.gerrit
    ssh:
      username: ci50
      hostname: review.openstack.org
    vote: true
    silent: false
    cfg-url-template: https://review.openstack.org/gitweb?p={project}.git;a=blob_plain;f=.rally-ci.yaml;hb={commit}
    cr-url-template: https://review.openstack.org/#q,{commit},n,z
    commit-url-template: https://github.com/{project}/commit/{commit}
    comment-job-template: "- {name} http://185.8.56.87/logs/{log_path}/ : {success} in {time}"
    comment-header: |
      Build {succeeded} by RallyCI. Use `rally-ci recheck` to recheck

      See status at: https://r-ci.tk/
    recheck-regexp: ^rally-ci recheck$
    env:
      GERRIT_PROJECT: change.project
      GERRIT_REF: patchSet.ref
      GERRIT_REFUPD_NEW: refUpdate.newRev
      GERRIT_REFUPD_OLD: refUpdate.oldRev
      GERRIT_REFUPD_NAME: refUpdate.refName
      GERRIT_REFUPD_PROJECT: refUpdate.project

- service:
    name: status
    module: rallyci.services.status
    listen: [127.0.0.1, 8080]

- provider:
    name: ci4950
    module: rallyci.providers.virsh
    freemb: 4096
    maxla: 20
    hosts:
      - hostname: 10.1.1.1
        port: 16622
      - hostname: 10.1.1.2
        port: 16622
    storage:
      backend: zfs
      path: /ci/rally
      dataset: ci/rally
    images:
      u1404:
        url: http://cloud-images.ubuntu.com/trusty/current/trusty-server-cloudimg-amd64-disk1.img
      u1404_2:
        url: http://cloud-images.ubuntu.com/trusty/current/trusty-server-cloudimg-amd64-disk1.img
      u1404_dev:
        parent: u1404
        build-net: "br5"
        build-scripts: ["init_ubuntu", "clone_projects"]
      u1404_dev_2:
        parent: u1404_2
        build-net: "br5"
        build-scripts: ["init_ubuntu", "clone_projects"]
      u1604_dev:
        parent: u1604
        build-net: "br5"
        build-scripts: ["init_ubuntu", "clone_projects"]
      u1404_docker:
        parent: u1404_dev
        build-net: "br5"
        build-scripts: ["install_docker"]
      u1404_docker_push:
        parent: u1404_docker
        build-net: "br5"
        build-scripts: ["install_docker_push"]
      u1404_dsvm:
        parent: u1404_dev
        build-net: "br5"
        build-scripts: ["install_deps"]
      u1404_dsvm_2:
        parent: u1404_dev_2
        build-net: "br5"
        build-scripts: ["install_deps"]
      u1604_dsvm:
        parent: u1604_dev
        build-net: "br5"
        build-scripts: ["install_deps"]
    vms:
      u1604_dsvm:
        vcpu: 2
        memory: 8096
        image: u1604_dsvm
        net: ["br5"]
      custom_u1404_docker_push:
        memory: 1024
        net: ["br5"]
      u1404_docker:
        memory: 1024
        image: u1404_docker
        net: ["br5"]
      u1404_dsvm:
        vcpu: 2
        memory: 5096
        image: u1404_dsvm
        net: ["br5"]
      u1404_dsvm_2:
        vcpu: 2
        memory: 4096
        image: u1404_dsvm_2
        net: ["br5"]
      u1404_dsvm_big:
        memory: 8192
        vcpu: 2
        image: u1404_dsvm
        net: ["br5"]
      u1404_rally_fuel:
        memory: 1024
        image: u1404_dsvm
        net: ["br5", "brfuel%"]
      u1404_rally_mos:
        memory: 1024
        image: u1404_dsvm
        net: ["br5", "brmos%"]
      u1604_rally_mos:
        memory: 1024
        image: u1604_dsvm
        net: ["br5", "brmos%"]
      fuel_community_60:
        memory: 4096
        net: ["brfuel% 52:54:00:c2:56:67"]
      fuel_community_80:
        memory: 4096
        net: ["brfuel% 52:54:00:c2:56:80"]
      mos_7_0_1:
        vcpu: 4
        memory: 8144
        net: ["brmos% 52:54:70:0a:11:01"]
      mos_7_0_2:
        vcpu: 2
        memory: 4144
        net: ["brmos% 52:54:70:0a:11:02"]
      mos_7_0_3:
        vcpu: 2
        memory: 4144
        net: ["brmos% 52:54:70:0a:11:03"]
      mos_8_0_1:
        vcpu: 4
        memory: 8144
        net: ["brmos% 52:54:43:0a:80:01"]
      mos_8_0_2:
        vcpu: 2
        memory: 4144
        net: ["brmos% 52:54:43:0a:80:02"]
      mos_8_0_3:
        vcpu: 2
        memory: 4144
        net: ["brmos% 52:54:43:0a:80:03"]
      mos_9_0_1:
        vcpu: 4
        memory: 8144
        net: ["brmos% 52:54:23:0a:90:01"]
      mos_9_0_2:
        vcpu: 2
        memory: 4144
        net: ["brmos% 52:54:23:0a:90:02"]
      mos_9_0_3:
        vcpu: 2
        memory: 4144
        net: ["brmos% 52:54:23:0a:90:03"]
      mos_8_0_1_ssl:
        vcpu: 3
        memory: 8144
        net: ["brmos% 52:54:43:ca:80:01"]
      mos_8_0_2_ssl:
        vcpu: 2
        memory: 4144
        net: ["brmos% 52:54:43:ca:80:02"]
      mos_8_0_3_ssl:
        vcpu: 2
        memory: 4144
        net: ["brmos% 52:54:43:ca:80:03"]

- script:
    name: init_ubuntu
    data: |
      sleep 16
      apt-get update && apt-get --force-yes -y upgrade
      apt-get --force-yes -y install git bash-completion build-essential python-dev libffi-dev libxml2-dev libxslt1-dev libssl-dev libpq-dev libmysqlclient-dev sudo wget libkrb5-dev libsqlite3-dev libldap2-dev libsasl2-dev libvirt-dev sshpass python3-dev liberasurecode-dev
      apt-get remove --force-yes -y cloud-init python-requests
      #
      wget https://bootstrap.pypa.io/get-pip.py -O /tmp/gp.py
      python2 /tmp/gp.py &
      python3 /tmp/gp.py &
      #
      useradd -u 65510 -m rally || true
      chsh rally -s /bin/bash
      sudo -i -u rally git config --global user.email "rally-ci@mirantis.com"
      sudo -i -u rally git config --global user.name "Mirantis Rally CI"
      echo 'rally ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/rally-42
      mkdir -p /home/rally/.ssh
      cat /root/.ssh/authorized_keys >> /home/rally/.ssh/authorized_keys
      wait
      python2 -m pip install virtualenv &
      python2 -m pip install tox &
      python3 -m pip install virtualenv &
      python3 -m pip install tox &
      wait

- script:
    name: clone_projects
    user: rally
    data: |
      env
      sudo mkdir -p /var/repos /opt/stack
      sudo chown rally /var/repos /opt/stack
      cd /opt/stack
      git clone https://github.com/kanaka/noVNC.git &
      cd /var/repos
      projects="\
      openstack/cinder \
      openstack/glance \
      openstack/nova \
      openstack/rally \
      openstack/heat \
      openstack/sahara \
      openstack/heat-cfntools \
      openstack/heat-templates \
      openstack/keystone \
      openstack/neutron \
      openstack/requirements \
      openstack-dev/ci-sandbox \
      openstack-dev/devstack"
      echo $projects
      for proj in $projects; do
        org=$(echo $proj | cut -d '/' -f 1)
        p=$(echo $proj | cut -d '/' -f 2)
        mkdir -p $org
        cd $org
        echo $proj
        git clone "git://git.openstack.org/$proj.git"
        ln -s /var/repos/$proj /opt/stack/$p
        cd ..
      done
      ln -s /var/repos/openstack/rally /home/rally/rally || true
      wait

- script:
    name: install_deps
    data: |
      apt-get update && apt-get --force-yes -y upgrade
      apt-get --force-yes -y install bridge-utils conntrack dnsmasq-base dnsmasq-utils dstat ebtables fontconfig fontconfig-config fonts-dejavu-core fonts-liberation fping genisoimage gettext graphviz iputils-arping javascript-common kpartx libaio1 libasprintf-dev libblas3 libcairo2 libcdt5 libcgraph6 libcroco3 libdatrie1 libdevmapper-event1.02.1 libfontconfig1 libgd3 libgettextpo-dev libgettextpo0 libgfortran3 libgraphite2-3 libgvc6 libgvpr2 libharfbuzz0b libice6 libjbig0 libjs-jquery libjs-jquery-metadata libjs-jquery-tablesorter liblapack3 libltdl7 libmnl0 libnetfilter-conntrack3 libnspr4 libnss3 libnss3-nssdb libpango-1.0-0 libpangocairo-1.0-0 libpangoft2-1.0-0 libpathplan4 libpixman-1-0 librados2 librbd1 libsgutils2-2 libsm6 libsysfs2 libthai-data libthai0 libtiff5 libunistring0 libx86-1 libxaw7 libxcb-render0 libxcb-shm0 libxmu6 libxpm4 libxrender1 libxt6 libyaml-0-2 libyaml-dev lvm2 open-iscsi pm-utils python-libxml2 python-lxml python-m2crypto python-mysql.connector python-mysqldb qemu-utils sg3-utils sharutils socat sqlite3 sysfsutils unzip vbetool vlan watershed libguestfs0 erlang mysql-client libjpeg-dev
      #
      rm -fr /root/.cache/pip
      python2 -m pip install pytest-xdist pytest-html numpy extras docutils
      #egrep -v 'monasca|marconiclient|pyngus|openstackclient' 
      cat /var/repos/openstack/requirements/global-requirements.txt > /tmp/gr.txt
      python2 -m pip install -r /tmp/gr.txt

- script:
    name: git_checkout
    user: rally
    data: |
      dig github.com
      env
      df -h
      retry () {
        n=0
        until [ $n -ge 5 ]
        do
          n=$[$n+1]
          timeout 60 "$@" && break
          echo "Retry in 15 seconds"
          sleep 15
        done
      }
      PROJECT=${GERRIT_PROJECT:-$GERRIT_REFUPD_PROJECT}
      cd "/var/repos/$PROJECT"
      #git remote set-url origin git://github.com/$PROJECT
      git checkout master && git pull
      if [ -n "$GERRIT_REF" ]; then
          retry git fetch https://review.openstack.org/$PROJECT $GERRIT_REF
          git checkout FETCH_HEAD # && git rebase master
      else
          git checkout $GERRIT_REFUPD_NEW
      fi
      git status
      git diff --name-only master

- script:
    name: rally_docker_build_and_check
    user: rally
    data: |
      docker --version
      cd /var/repos/openstack/rally
      docker build -t rallyforge/rally .
      mkdir /tmp/rv
      sudo chown 65500 /tmp/rv
      docker run -v /tmp/rv:/home/rally rallyforge/rally rally-manage db recreate
      docker run -v /tmp/rv:/home/rally rallyforge/rally rally deployment create --name EX --file /opt/rally/samples/deployments/existing.json
      docker run -v /tmp/rv:/home/rally rallyforge/rally rally deployment list
      docker run -v /tmp/rv:/home/rally rallyforge/rally rally version
      #docker run -v /tmp/rv:/home/rally rallyforge/rally rally verify install

- script:
    name: pull_ubuntu_1404
    user: rally
    data: |
      n=0
      until [ $n -ge 5 ]
      do
        n=$[$n+1]
        docker pull ubuntu:14.04 && break
        echo "Retry in 5 seconds"
        sleep 5
      done

- script:
    name: rally_docker_push
    user: rally
    data: |
      docker --version
      pushd /home/rally/rally
      mkdir /tmp/df || true
      cat >/tmp/df/Dockerfile<<EOF
      FROM image-flat
      MAINTAINER Sergey Skripnick <sskripnick@mirantis.com>
      VOLUME ["/home/rally"]
      WORKDIR /home/rally
      USER rally
      ENV HOME /home/rally
      CMD ["bash", "--login"]
      EOF
      build_and_push () {
        TAG=$1
        sudo docker build --no-cache -t image-built . || return 1
        docker run image-built rally deployment list
        id=$(docker ps -aq | head -n 1)
        docker export $id > /tmp/rc.tar
        docker import - image-flat < /tmp/rc.tar
        pushd /tmp/df
        sudo docker build -t rallyforge/rally:$TAG .
        /usr/bin/docker run rallyforge/rally:$TAG rally version
        sudo /usr/bin/docker push rallyforge/rally:$TAG
        popd
      }
      substr () {
        echo "$2" | grep "$1"
      }
      build_and_push latest
      tags=$(curl https://index.docker.io/v1/repositories/rallyforge/rally/tags)
      for tag in $(git tag | grep -v '0\.0\.[1-3]'); do
        if substr "$tag" "$tags"; then
          echo $tag already in repo
        else
          echo Pushing $tag
          git checkout $tag
          build_and_push $tag || true
        fi
      done
      popd

- script:
    name: install_docker
    data: |
      apt-get --force-yes -y update && apt-get --force-yes -y upgrade
      apt-get --force-yes -y install docker.io
      usermod -a -G docker rally || true

- script:
    name: install_docker_push
    data: |
      echo 'rally ALL=NOPASSWD:/usr/bin/docker push rallyforge*' > /etc/sudoers.d/rally-docker-push
      echo 'rally ALL=NOPASSWD:/usr/bin/docker build *' >> /etc/sudoers.d/rally-docker-push

- script:
    name: install_mos_cert
    interpreter: /bin/bash -x
    data: |
      CERT_DIR="/usr/local/share/ca-certificates/"
      MOS_HOST=$(echo $OS_AUTH_URL | sed -n -e 's/^https:\/\/\(.*\):5000.*/\1/p')
      echo "$MOS_IP $MOS_HOST" >> /etc/hosts
      set -o pipefail
      n=0
      while true; do
       n=$[$n+1]
       if [ $n -ge 60 ]; then
        echo "Timeout."
        exit 255
       fi
       echo | openssl s_client -connect $MOS_IP:443 2>&1 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ${CERT_DIR}/mos.crt
       if [ "$?" -eq "1" ]; then
        sleep 10
       else
        break
       fi
      done
      HASH=$(openssl x509 -noout -hash -in "${CERT_DIR}/mos.crt")
      ln -s "${CERT_DIR}/mos.crt" "/etc/ssl/certs/mos.pem"
      ln -s "/etc/ssl/certs/mos.pem" "/etc/ssl/certs/${HASH}.0"
      update-ca-certificates
      curl -i https://mos80-ssl.fuel.local:5000/v2.0/

- script:
    name: install_rally
    data: |
      RALLY_DIR=/var/repos/openstack/rally
      VENV=${RALLY_DIR}/.venv
      RCI_PYTHON=${RCI_PYTHON:-python}
      cd $RALLY_DIR
      virtualenv $VENV -p $RCI_PYTHON
      RCI_PYTHON=${VENV}/bin/python
      sudo rm -fr /root/.cache/pip
      $RCI_PYTHON -m pip install -r requirements.txt -r test-requirements.txt -r optional-requirements.txt
      $RCI_PYTHON setup.py build
      $RCI_PYTHON setup.py install
      mkdir /etc/rally
      cp etc/rally/rally.conf.sample /etc/rally/rally.conf
      sed -i 's|^.*sahara_cluster_create_timeout.*$|sahara_cluster_create_timeout=6000|' /etc/rally/rally.conf
      sed -i 's|^.*glance_image_create_timeout.*$|glance_image_create_timeout=600|' /etc/rally/rally.conf
      ln -s ${VENV}/bin/rally /usr/local/bin/
      ln -s ${VENV}/bin/rally-manage /usr/local/bin/
      if [ -n "${RALLY_POSTGRES}" ]; then
        unset LANG
        unset ${!LC_*}
        apt-get update && apt-get --force-yes -y install postgresql
        sudo -i -u postgres createuser -s -d -r -l rally
        sudo -i -u postgres createdb --owner=rally rally
        sed -i 's|#connection *=.*|connection=postgresql+psycopg2:///rally?host=/var/run/postgresql|' /etc/rally/rally.conf
        $RCI_PYTHON -m pip install psycopg2
      fi
      if [ -n "${RALLY_MYSQL}" ]; then
        unset LANG
        unset ${!LC_*}
        echo "mysql-server mysql-server/root_password password r00tme" | debconf-set-selections
        echo "mysql-server mysql-server/root_password_again password r00tme" | debconf-set-selections
        apt-get update && apt-get --force-yes -y install mysql-server libmysqlclient-dev
        mysql -u root -pr00tme -e "create database rally;"
        mysql -u root -pr00tme -e "create user 'rally'@'localhost' identified by 'rally';"
        mysql -u root -pr00tme -e "grant all on rally.* to 'rally'@'localhost';"
        sed -i 's|#connection *=.*|connection=mysql+pymysql://rally:rally@localhost/rally|' /etc/rally/rally.conf
        $RCI_PYTHON -m pip install pymysql
      fi
      sudo -u rally /usr/local/bin/rally-manage db recreate

- script:
    name: rally_gate
    user: rally
    data: |
      sudo sh -c 'echo "\n10.1.1.1 sahara-files.mirantis.com\n" >> /etc/hosts'
      which rally
      rally deployment list
      cd rally
      PATH=/var/repos/openstack/rally/.venv/bin:$PATH
      env
      /var/repos/openstack/rally/.venv/bin/$RCI_PYTHON -m pip freeze
      /var/repos/openstack/rally/.venv/bin/$RCI_PYTHON tests/ci/rally-gate.py

- script:
    name: run_scenario
    user: rally
    data: |
      sudo sh -c 'echo "\n10.1.1.1 sahara-files.mirantis.com\n" >> /etc/hosts'
      cd rally
      cp -r rally-jobs/extra ~/.rally
      ls ~/.rally
      rally deployment list
      env
      rally --rally-debug task validate --task $RCI_TASK --task-args $RCI_TASK_ARGS
      rally --rally-debug task start --task $RCI_TASK --task-args $RCI_TASK_ARGS
      mkdir rally-plot
      rally --rally-debug task results | gzip > rally-plot/resutls.json.gz
      rally --rally-debug task sla_check | gzip > rally-plot/sla.txt.gz
      rally --rally-debug task detailed --iterations-data | gzip > rally-plot/detailed.txt.gz
      rally --rally-debug task report --out rally-plot/report.html
      rally --rally-debug task sla_check

- script:
    name: upload_fedora
    user: rally
    data: |
      wget http://10.1.1.1/fedora-23.x86_64.qcow2 -q
      md5sum fedora-23.x86_64.qcow2
      sudo pip install python-openstackclient
      openstack image list --insecure
      openstack image create fedora --disk-format qcow2 --file fedora-23.x86_64.qcow2 --public --container-format bare --insecure
      rm fedora-23.x86_64.qcow2

- script:
    name: create_deployment_fromenv
    user: rally
    data: |
      rally deployment create --name FROMENV --fromenv
      rally deployment config

- script:
    name: create_deployment_devstack
    user: rally
    data: |
      source /var/repos/openstack-dev/devstack/openrc admin admin
      env
      env | grep OS_
      rally deployment create --name DSVM --fromenv
      rally deployment config

- script:
    name: wait_current_deployment
    user: rally
    data: |
      n=0
      until [ $n -ge 60 ]
      do  
          n=$[$n+1]
          sleep 10
          rally deployment check && exit 0
      done
      echo "Timeout waiting for cloud"
      exit 255

- script:
    name: eth1_up
    data: |
      ip link set eth1 up
      ip link list
      ip address flush dev eth1
      RCI_IP=${RCI_IP:-10.20.0.2/24}
      ip address add "$RCI_IP" dev eth1
      up_net () {
        local MOS_PUBLIC_VLAN=$1
        local MOS_PUBLIC_IP=$2
        if [ -n "$MOS_PUBLIC_VLAN" ]; then
          ip link add link eth1 name "vlan$MOS_PUBLIC_VLAN" type vlan id "$MOS_PUBLIC_VLAN"
          ip addr add "$MOS_PUBLIC_IP" dev "vlan$MOS_PUBLIC_VLAN"
          ip link set "vlan$MOS_PUBLIC_VLAN" up
        fi
      }
      up_net $MOS_PUBLIC_VLAN $MOS_PUBLIC_IP
      up_net $MOS_MANAGEMENT_VLAN $MOS_MANAGEMENT_IP
      up_net $MOS_PRIVATE_VLAN $MOS_PRIVATE_IP
      sysctl net.ipv4.ip_forward=1
      iptables -t nat -I POSTROUTING -s 172.16.0.0/24 -j MASQUERADE

- script:
    name: stack_sh
    user: rally
    data: |
      dig github.com
      cd /opt/stack
      for d in $(ls); do
        pushd $d
        #sed -i 's|http://git.openstack.org|git://github.com|' .git/config
        git pull || true
        sleep 1
        popd
      done
      cd /var/repos/openstack-dev/devstack
      git pull
      cat > local.conf <<EOF
      [[local|localrc]]
      CINDER_ENABLE_V1_API=True
      ADMIN_PASSWORD=admin
      DATABASE_PASSWORD=admin
      RABBIT_PASSWORD=admin
      SERVICE_PASSWORD=admin
      FIXED_RANGE="10.0.0.0/24"
      SERVICE_TOKEN=a862f596-76f3-21e3-b3b2-e716f9080d51
      disable_service zookeeper
      disable_service tempest
      disable_service horizon
      disable_service n-net
      enable_service q-svc
      enable_service q-agt
      enable_service q-dhcp
      enable_service q-l3
      enable_service q-meta
      LOGDIR=/opt/stack/logs
      LOG_COLOR=False
      EOF
      if [ -n "$WITH_SAHARA" ]; then
      cat >> local.conf <<EOF
      enable_service s-proxy s-object s-container s-account
      enable_service h-eng h-api h-api-cfn h-api-cw heat # heat
      SWIFT_LOOPBACK_DISK_SIZE=6G
      SWIFT_LOOPBACK_DISK_SIZE=5368709122 # 5G
      SWIFT_MAX_FILE_SIZE=4294967296 # 4G
      SWIFT_HASH=66a3d6b56c1f479c8b4e70ab5c2000f5
      SWIFT_REPLICAS=1
      SWIFT_DATA_DIR=$DEST/data
      SAHARA_ENABLE_DISTRIBUTED_PERIODICS=False
      enable_plugin sahara git://git.openstack.org/openstack/sahara
      EOF
      fi
      ls -lh /opt/stack
      ./stack.sh > /tmp/stack.sh.log
      mv /tmp/stack.sh.log /opt/stack/logs
      echo "Devstack build finished with local.conf:"
      cat local.conf | tee /opt/stack/logs/local.conf.txt

- script:
    name: rally_functional
    user: rally
    data: |
      source /var/repos/openstack-dev/devstack/openrc admin admin
      rally deployment create --name DEVSTACK --fromenv
      rally deployment check
      cd rally
      . /var/repos/openstack/rally/.venv/bin/activate
      export RCI_KEEP_DB=1
      python -m pip freeze
      tox -e cli
      uptime

- script:
    name: unittests
    user: rally
    data: |
      sudo ${RCI_PYTHON:-python} -m pip install -r /var/repos/$GERRIT_PROJECT/test-requirements.txt
      sudo ${RCI_PYTHON:-python} -m pip install -r /var/repos/$GERRIT_PROJECT/requirements.txt
      ${RCI_PYTHON:-python} -m pip freeze
      cd /var/repos/$GERRIT_PROJECT
      $RCI_PYTHON -m unittest discover -v -s $RCI_UNITTESTS_DIR
      uptime

- script:
    name: gzip_ds_logs
    interpreter: /bin/bash -x -s
    data: |
      cd /opt/stack/logs
      find -type l -delete
      gzip -9 *

- script:
    name: copy_mos_logs
    interpreter: /bin/bash -x -s
    data: |
      mkdir /tmp/mos-logs/
      for ip in $MOS_NODES; do
          mkdir /tmp/mos-logs/$ip
          sshpass -p r00tme scp -o 'StrictHostKeyChecking no' root@$ip:/var/log/*-all.log /tmp/mos-logs/$ip
          sshpass -p r00tme scp -o 'StrictHostKeyChecking no' root@$ip:/var/log/ceph/*.log /tmp/mos-logs/$ip
          gzip -9 /tmp/mos-logs/$ip/*
      done
      chmod -R a+r /tmp/mos-logs

- script:
    name: show_git_log
    user: rally
    interpreter: /bin/bash -x -s
    data: |
      cd /var/repos/${GERRIT_PROJECT:-$GERRIT_REFUPD_PROJECT}
      git log
      env

- job:
    name: fuel-community-6.0
    env:
      RALLY_SCENARIO: "fuel"
      RCI_IP: "10.20.0.3/24"
      OS_AUTH_URL: "http://10.20.0.2:5000/v2.0/"
      OS_USERNAME: admin
      OS_PASSWORD: admin
      OS_TENANT_NAME: admin
      RCI_PYTHON: python2.7
    provider: ci4950
    vms:
      - name: u1404_rally_fuel
        scripts:
          - git_checkout
          - install_rally
          - eth1_up
          - create_deployment_fromenv
          - wait_current_deployment
          - rally_gate
        publish:
          - ["/home/rally/rally/rally-plot", "rally-plot"]
      - name: fuel_community_60

- job:
    name: fuel-community-8.0
    env:
      RALLY_SCENARIO: "fuel"
      RCI_IP: "10.20.0.3/24"
      OS_AUTH_URL: "http://10.20.0.2:5000/v2.0/"
      OS_USERNAME: admin
      OS_PASSWORD: admin
      OS_TENANT_NAME: admin
      RCI_PYTHON: python2.7
    provider: ci4950
    vms:
      - name: u1404_rally_fuel
        scripts:
          - git_checkout
          - install_rally
          - eth1_up
          - create_deployment_fromenv
          - wait_current_deployment
          - rally_gate
        publish:
          - ["/home/rally/rally/rally-plot", "rally-plot"]
      - name: fuel_community_80

- job:
    name: mos-7.0
    env:
      MOS_NODES: "10.20.0.3 10.20.0.4 10.20.0.5"
      MOS_PUBLIC_VLAN: 100
      MOS_MANAGEMENT_VLAN: 101
      MOS_PRIVATE_VLAN: 103
      MOS_PUBLIC_IP: 172.16.0.1/24
      MOS_MANAGEMENT_IP: 192.168.0.254/24
      MOS_PRIVATE_IP: 192.168.2.1/24
      RCI_TASK: "rally-jobs/rally-mos.yaml"
      RCI_TASK_ARGS: '{"sahara_hadoop_version":"2.6.0","external_net":"net04_ext","external_net_id":"9d477754-e9ba-4560-9b2b-9ce9d36638ce","external_router_id":"c497caa1-9d73-402b-bcd1-cc269e9af29e","sahara_service_type":"data_processing"}'
      OS_AUTH_URL: "http://172.16.0.3:5000/v2.0/"
      OS_USERNAME: admin
      OS_PASSWORD: admin
      OS_TENANT_NAME: admin
    provider: ci4950
    vms:
      - name: mos_7_0_1
      - name: mos_7_0_2
      - name: mos_7_0_3
      - name: u1404_rally_mos
        publish:
          - ["/tmp/mos-logs", "mos-logs"]
          - ["/home/rally/rally/rally-plot", "rally-plot"]
        scripts:
          - git_checkout
          - eth1_up
          - install_rally
          - create_deployment_fromenv
          - wait_current_deployment
          - upload_fedora
          - run_scenario
        post:
          - copy_mos_logs

- job:
    name: mos-8.0
    env:
      MOS_NODES: "10.20.0.3 10.20.0.4 10.20.0.5"
      MOS_PUBLIC_VLAN: 100
      MOS_MANAGEMENT_VLAN: 102
      MOS_PRIVATE_VLAN: 101
      MOS_PUBLIC_IP: 172.16.0.1/24
      MOS_MANAGEMENT_IP: 192.168.2.254/24
      MOS_PRIVATE_IP: 192.168.0.253/24
      RCI_TASK: "rally-jobs/rally-mos.yaml"
      RCI_TASK_ARGS: '{"sahara_hadoop_version":"2.7.1","external_net":"admin_floating_net","external_net_id":"df6beb1f-834b-4205-ae45-e17020d1d382","external_router_id":"a4072b62-51f6-4a30-a677-1a4a1c02768e","sahara_service_type":"data-processing"}'
      OS_AUTH_URL: "http://172.16.0.9:5000/v2.0/"
      OS_USERNAME: admin
      OS_PASSWORD: admin
      OS_TENANT_NAME: admin
    provider: ci4950
    vms:
      - name: mos_8_0_1
      - name: mos_8_0_2
      - name: mos_8_0_3
      - name: u1404_rally_mos
        publish:
          - ["/tmp/mos-logs", "mos-logs"]
          - ["/home/rally/rally/rally-plot", "rally-plot"]
        scripts:
          - git_checkout
          - eth1_up
          - install_rally
          - create_deployment_fromenv
          - wait_current_deployment
          - upload_fedora
          - run_scenario
        post:
          - copy_mos_logs

- job:
    name: mos-8.0-ssl
    env:
      MOS_NODES: "10.20.0.6 10.20.0.7 10.20.0.8"
      MOS_PUBLIC_VLAN: 100
      MOS_MANAGEMENT_VLAN: 101
      MOS_PRIVATE_VLAN: 103
      MOS_PUBLIC_IP: 172.16.0.1/24
      MOS_MANAGEMENT_IP: 192.168.0.254/24
      MOS_PRIVATE_IP: 192.168.2.1/24
      MOS_IP: "172.16.0.6"
      RCI_TASK: "rally-jobs/rally-mos.yaml"
      RCI_TASK_ARGS: '{"sahara_hadoop_version":"2.7.1","external_net":"admin_floating_net","external_net_id":"ef029217-485b-43fb-83ea-6de1f5119f26","external_router_id":"1efd7019-ebe8-4247-8440-f22f92df80a1","sahara_service_type":"data-processing"}'
      OS_AUTH_URL: "https://mos80-ssl.fuel.local:5000/v2.0/"
      OS_CACERT: "/usr/local/share/ca-certificates/mos.crt"
      OS_USERNAME: admin
      OS_PASSWORD: admin
      OS_TENANT_NAME: admin
    provider: ci4950
    vms:
      - name: mos_8_0_1_ssl
      - name: mos_8_0_2_ssl
      - name: mos_8_0_3_ssl
      - name: u1404_rally_mos
        publish:
          - ["/tmp/mos-logs", "mos-logs"]
          - ["/home/rally/rally/rally-plot", "rally-plot"]
        scripts:
          - git_checkout
          - eth1_up
          - install_rally
          - create_deployment_fromenv
          - install_mos_cert
          - wait_current_deployment
          - upload_fedora
          - run_scenario
        post:
          - copy_mos_logs

- job:
    name: mos-8.0-ssl-v3
    env:
      MOS_NODES: "10.20.0.6 10.20.0.7 10.20.0.8"
      MOS_PUBLIC_VLAN: 100
      MOS_MANAGEMENT_VLAN: 101
      MOS_PRIVATE_VLAN: 103
      MOS_PUBLIC_IP: 172.16.0.1/24
      MOS_MANAGEMENT_IP: 192.168.0.254/24
      MOS_PRIVATE_IP: 192.168.2.1/24
      MOS_IP: "172.16.0.6"
      RCI_TASK: "rally-jobs/rally-mos.yaml"
      RCI_TASK_ARGS: '{"sahara_hadoop_version":"2.7.1","external_net":"admin_floating_net","external_net_id":"ef029217-485b-43fb-83ea-6de1f5119f26","sahara_service_type":"data-processing","keystone_version":"v3"}'
      OS_IDENTITY_API_VERSION: 3
      OS_AUTH_URL: "https://mos80-ssl.fuel.local:5000/v3/"
      OS_CACERT: "/usr/local/share/ca-certificates/mos.crt"
      OS_USERNAME: admin
      OS_PASSWORD: admin
      OS_PROJECT_NAME: admin
      OS_TENANT_NAME: admin
      OS_PROJECT_DOMAIN_NAME: Default
      OS_USER_DOMAIN_NAME: Default
    provider: ci4950
    vms:
      - name: mos_8_0_1_ssl
      - name: mos_8_0_2_ssl
      - name: mos_8_0_3_ssl
      - name: u1404_rally_mos
        publish:
          - ["/tmp/mos-logs", "mos-logs"]
          - ["/home/rally/rally/rally-plot", "rally-plot"]
        scripts:
          - git_checkout
          - eth1_up
          - install_rally
          - create_deployment_fromenv
          - install_mos_cert
          - wait_current_deployment
          - upload_fedora
          - run_scenario
        post:
          - copy_mos_logs

- job:
    name: mos-9.0
    env:
      MOS_NODES: "10.20.0.3 10.20.0.4 10.20.0.5"
      MOS_PUBLIC_VLAN: 100
      MOS_MANAGEMENT_VLAN: 102
      MOS_PRIVATE_VLAN: 101
      MOS_PUBLIC_IP: 172.16.0.1/24
      MOS_MANAGEMENT_IP: 192.168.2.254/24
      MOS_PRIVATE_IP: 192.168.0.253/24
      RCI_TASK: "rally-jobs/rally-mos.yaml"
      RCI_TASK_ARGS: '{"sahara_hadoop_version":"2.7.1","external_net":"admin_floating_net","external_net_id":"df6beb1f-834b-4205-ae45-e17020d1d382","external_router_id":"a4072b62-51f6-4a30-a677-1a4a1c02768e","sahara_service_type":"data-processing"}'
      OS_AUTH_URL: "http://172.16.0.3:5000/v2.0/"
      OS_USERNAME: admin
      OS_PASSWORD: admin
      OS_TENANT_NAME: admin
    provider: ci4950
    vms:
      - name: mos_9_0_1
      - name: mos_9_0_2
      - name: mos_9_0_3
      - name: u1404_rally_mos
        publish:
          - ["/tmp/mos-logs", "mos-logs"]
          - ["/home/rally/rally/rally-plot", "rally-plot"]
        scripts:
          - git_checkout
          - eth1_up
          - install_rally
          - create_deployment_fromenv
          - wait_current_deployment
          - upload_fedora
          - run_scenario
        post:
          - copy_mos_logs

- job:
    name: rally-dsvm-pg-py27-cli-new
    timeout: 180
    env:
      RCI_PYTHON: python2.7
      RALLY_POSTGRES: 1
    provider: ci4950
    vms:
      - name: u1404_dsvm_2
        publish:
          - ["/opt/stack/logs", "devstack-logs"]
          - ["/home/rally/rally/rally-cli-output-files", "cli-output-files"]
        scripts:
          - git_checkout
          - stack_sh
          - install_rally
          - create_deployment_devstack
          - wait_current_deployment
          - rally_functional
        post:
          - gzip_ds_logs

- job:
    name: rally-dsvm-pg-py27-cli
    timeout: 180
    env:
      RCI_PYTHON: python2.7
      RALLY_POSTGRES: 1
    provider: ci4950
    vms:
      - name: u1604_dsvm
        publish:
          - ["/opt/stack/logs", "devstack-logs"]
          - ["/home/rally/rally/rally-cli-output-files", "cli-output-files"]
        scripts:
          - git_checkout
          - stack_sh
          - install_rally
          - create_deployment_devstack
          - wait_current_deployment
          - rally_functional
        post:
          - gzip_ds_logs

- job:
    name: rally-dsvm-pg-py34-cli
    timeout: 120
    env:
      RCI_PYTHON: python3
      RALLY_POSTGRES: 1
    provider: ci4950
    vms:
      - name: u1604_dsvm
        publish:
          - ["/opt/stack/logs", "devstack-logs"]
          - ["/home/rally/rally/rally-cli-output-files", "cli-output-files"]
        scripts:
          - git_checkout
          - stack_sh
          - install_rally
          - create_deployment_devstack
          - wait_current_deployment
          - rally_functional
        post:
          - gzip_ds_logs

- job:
    name: docker-check
    provider: ci4950
    vms:
      - name: u1404_docker
        scripts:
          - git_checkout
          - pull_ubuntu_1404
          - rally_docker_build_and_check

- job:
    name: docker-push
    provider: ci4950
    vms:
      - name: custom_u1404_docker_push
        scripts:
          - git_checkout
          - pull_ubuntu_1404
          - rally_docker_push

- job:
    name: rally-pg-py27-unit
    env:
      RCI_PYTHON: python2.7
      RCI_UNITTESTS_DIR: tests/unit
      RALLY_POSTGRES: 1
      RALLY_UNITTEST_DB_URL: "postgresql:///rally?host=/var/run/postgresql"
    provider: ci4950
    vms:
      - name: u1404_dsvm
        scripts:
          - git_checkout
          - install_rally
          - unittests

- job:
    name: rally-mysql-py27-unit
    env:
      RCI_PYTHON: python2.7
      RCI_UNITTESTS_DIR: tests/unit
      RALLY_MYSQL: 1
      RALLY_UNITTEST_DB_URL: "mysql://rally:rally@localhost/rally"
    provider: ci4950
    vms:
      - name: u1404_dsvm
        scripts:
          - git_checkout
          - install_rally
          - unittests

- job:
    name: rally-dsvm-sahara
    env:
      WITH_SAHARA: 1
      RCI_TASK: rally-jobs/sahara-clusters.yaml
      RCI_TASK_ARGS: '{"sahara_hadoop_version":"2.7.1"}'
    provider: ci4950
    vms:
      - name: u1404_dsvm_big
        scripts:
          - git_checkout
          - stack_sh
          - install_rally
          - create_deployment_devstack
          - wait_current_deployment
          - run_scenario
        post:
          - gzip_ds_logs
        publish:
          - ["/opt/stack/logs", "dsvm-logs"]
          - ["/home/rally/rally/rally-plot", "rally-plot"]

- job:
    name: test
    env:
      RCI_OK: ok
    provider: ci4950
    vms:
      - name: u1404_dsvm
        publish:
          - ["/home/rally/doc", "test-logs"]
        scripts:
          - git_checkout
          - show_git_log

- matrix:
    name: test
    projects:
      - openstack-dev/ci-sandbox
    jobs:
      - test
    merged-jobs:
      - test

- matrix:
    name: rally
    projects:
      - openstack/rally
    merged-jobs:
      - docker-push
    non-voting-jobs:
      - mos-8.0-ssl
      - mos-9.0
    optional-jobs:
      - fuel-community-6.0
      - mos-7.0
    jobs:
      - docker-check
      - rally-dsvm-pg-py27-cli
      - rally-dsvm-pg-py34-cli
      - mos-8.0
      - mos-8.0-ssl-v3
      - rally-pg-py27-unit
      - rally-mysql-py27-unit
